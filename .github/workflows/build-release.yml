name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  build-binaries:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            target: 'aarch64-apple-darwin'
            args: '--bundles app,dmg'
          - platform: 'macos-latest'
            target: 'x86_64-apple-darwin'
            args: '--bundles app,dmg'
          - platform: 'ubuntu-22.04'
            target: 'x86_64-unknown-linux-gnu'
            args: '--bundles deb,appimage'
          - platform: 'windows-latest'
            target: 'x86_64-pc-windows-msvc'
            args: '--bundles msi,nsis'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Install macOS dependencies
        if: startsWith(matrix.platform, 'macos')
        run: |
          brew install create-dmg

      - name: Install frontend dependencies
        working-directory: app
        run: bun install --frozen-lockfile

      - name: Build Tauri app
        working-directory: app
        run: bun run tauri build --target ${{ matrix.target }} ${{ matrix.args }}

      - name: Upload macOS DMG
        if: startsWith(matrix.platform, 'macos')
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.target }}-dmg
          path: app/src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg

      - name: Upload Windows MSI
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-msi
          path: app/src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi

      - name: Upload Windows NSIS
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-nsis
          path: app/src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe

      - name: Upload Linux DEB
        if: matrix.platform == 'ubuntu-22.04'
        uses: actions/upload-artifact@v4
        with:
          name: linux-deb
          path: app/src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb

      - name: Upload Linux AppImage
        if: matrix.platform == 'ubuntu-22.04'
        uses: actions/upload-artifact@v4
        with:
          name: linux-appimage
          path: app/src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage

  release:
    needs: build-binaries
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag_name || github.ref_name }}
          name: JIDO Conductor ${{ github.event.inputs.tag_name || github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/**/*.dmg
            artifacts/**/*.msi
            artifacts/**/*.exe
            artifacts/**/*.deb
            artifacts/**/*.AppImage
          body: |
            ## Installation
            
            ### macOS
            - **aarch64 (Apple Silicon M1/M2/M3)**: `*aarch64*.dmg`
            - **x64 (Intel)**: `*x86_64*.dmg`
            
            ### Windows
            - **MSI Installer**: `*.msi`
            - **NSIS Installer**: `*.exe`
            
            ### Linux
            - **Debian/Ubuntu**: `*.deb`
            - **AppImage**: `*.AppImage`
            
            ## What's Changed
            See the full changelog below for details.