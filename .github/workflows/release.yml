name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  RUST_VERSION: "stable"
  NODE_VERSION: "20"
  ELIXIR_VERSION: "1.16"
  OTP_VERSION: "26"

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false

  build-and-upload:
    name: Build and Upload
    needs: create-release
    strategy:
      matrix:
        platform:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: .deb
          - os: macos-latest
            target: x86_64-apple-darwin
            ext: .dmg
          - os: macos-latest
            target: aarch64-apple-darwin
            ext: .dmg
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            ext: .msi
    
    runs-on: ${{ matrix.platform.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.platform.target }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
      
      - name: Install Linux dependencies
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev
      
      - name: Install frontend dependencies
        working-directory: app
        run: bun install
      
      - name: Build Tauri app
        working-directory: app
        run: bun run tauri:build -- --target ${{ matrix.platform.target }}
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
      
      - name: Find built artifact
        id: find_artifact
        run: |
          if [ "${{ matrix.platform.os }}" = "windows-latest" ]; then
            echo "artifact_path=$(find app/src-tauri/target/release/bundle -name "*${{ matrix.platform.ext }}")" >> $GITHUB_OUTPUT
          else
            echo "artifact_path=$(find app/src-tauri/target/release/bundle -name "*${{ matrix.platform.ext }}")" >> $GITHUB_OUTPUT
          fi
        shell: bash
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.find_artifact.outputs.artifact_path }}
          asset_name: jido-conductor-${{ matrix.platform.target }}${{ matrix.platform.ext }}
          asset_content_type: application/octet-stream