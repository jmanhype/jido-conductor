name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write

jobs:
  # First, build all platform binaries
  build-binaries:
    name: Build ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            target: 'aarch64-apple-darwin'
            args: '--bundles app,dmg'
          - platform: 'macos-latest'
            target: 'x86_64-apple-darwin'
            args: '--bundles app,dmg'
          - platform: 'ubuntu-22.04'
            target: 'x86_64-unknown-linux-gnu'
            args: '--bundles deb,appimage'
          - platform: 'windows-latest'
            target: 'x86_64-pc-windows-msvc'
            args: '--bundles msi,nsis'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Install macOS dependencies
        if: startsWith(matrix.platform, 'macos')
        run: |
          brew install create-dmg

      - name: Install frontend dependencies
        working-directory: app
        run: bun install --frozen-lockfile

      - name: Build Tauri app
        working-directory: app
        run: bun run tauri build --target ${{ matrix.target }} ${{ matrix.args }}

      - name: Upload macOS DMG
        if: startsWith(matrix.platform, 'macos')
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.target }}-dmg
          path: app/src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg

      - name: Upload Windows MSI
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-msi
          path: app/src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi

      - name: Upload Windows NSIS
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-nsis
          path: app/src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe

      - name: Upload Linux DEB
        if: matrix.platform == 'ubuntu-22.04'
        uses: actions/upload-artifact@v4
        with:
          name: linux-deb
          path: app/src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb

      - name: Upload Linux AppImage
        if: matrix.platform == 'ubuntu-22.04'
        uses: actions/upload-artifact@v4
        with:
          name: linux-appimage
          path: app/src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage

  # Then run semantic-release with the built artifacts
  semantic-release:
    name: Semantic Release
    needs: build-binaries
    runs-on: ubuntu-latest
    outputs:
      new-release-published: ${{ steps.semantic.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic.outputs.new-release-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --no-save

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of artifacts
        run: ls -R artifacts

      - name: Prepare assets for release
        run: |
          mkdir -p release-assets
          find artifacts -type f \( -name "*.dmg" -o -name "*.msi" -o -name "*.exe" -o -name "*.deb" -o -name "*.AppImage" \) -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Semantic Release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HUSKY: 0
        run: |
          # Export artifacts path for semantic-release to use
          export RELEASE_ASSETS_PATH="$(pwd)/release-assets"
          bun run release

  # Upload assets to the release if a new version was published
  upload-assets:
    name: Upload Release Assets
    needs: semantic-release
    if: needs.semantic-release.outputs.new-release-published == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get release tag
        id: get_tag
        run: |
          echo "tag=v${{ needs.semantic-release.outputs.new-release-version }}" >> $GITHUB_OUTPUT

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          files: |
            artifacts/**/*.dmg
            artifacts/**/*.msi
            artifacts/**/*.exe
            artifacts/**/*.deb
            artifacts/**/*.AppImage
          fail_on_unmatched_files: false